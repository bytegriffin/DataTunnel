#!/bin/sh

# Get standard environment variables
bin=`dirname $0`

# Only set DATATUNNEL_HOME if not already set
[ -z "$DATATUNNEL_HOME" ] && DATATUNNEL_HOME=`cd "$bin/.." ; pwd`

if [ -r "$DATATUNNEL_HOME"/bin/datatunnel-env.sh ]; then
     BASEDIR="$DATATUNNEL_HOME"
  . "$DATATUNNEL_HOME"/bin/datatunnel-env.sh
else
  echo "Cannot find $DATATUNNEL_HOME/bin/datatunnel-env.sh"
  echo "This file is needed to run this program"
  exit 1
fi

if [ -x "$DATATUNNEL_HOME"/bin/datatunnel-env.sh ]; then
  . "$DATATUNNEL_HOME"/bin/datatunnel-env.sh 
fi

# Now switch to home directory of echo
cd $DATATUNNEL_HOME

if [ -z "$JAVA_OPTS" ]; then
  JAVA_OPTS="-server -Xms2560m -Xprof -Xmx2560m -Xmn2g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -Djcore.parser=SAX"
else
  JAVA_OPTS="$JAVA_OPTS -server -Xms2560m -Xprof -Xmx2560m -Xmn2g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"
fi

export DATATUNNEL_PID=$DATATUNNEL_HOME/datatunnel.pid
export DATATUNNEL_MONITOR_PID=$DATATUNNEL_HOME/datatunnel-monitor.pid
export DATATUNNEL_PRGNAME="datatunnel"

check_process_exists()
{
  if [ -f "$DATATUNNEL_PID" ]; then
    pid=`cat $DATATUNNEL_PID`
    [ -z $pid ] &&  pid="-1"
    kill -0 $pid > /dev/null 2>&1
    find_pids=`ps aux | grep $DATATUNNEL_PRGNAME | grep -v 'grep' | awk '{print $2}'`
    for find_pid in $find_pids
    do  
      if [ $find_pid = $pid ]; then
        echo "Process exists, can't start or run new process"
        exit 0
      fi  
    done
  fi
}

# if no args specified, show usage
if [ $# -lt 1 ]; then
  more <<'EOF'
+====================================================+
|    DataTunnel : a data processing channel   |
+-------------------------------------------------------------------------------------------+
|Usage:   datatunnel  <params>                |
|params:  start,     Start the datatunnel     |
|         stop,      Stop the datatunnel      |
|         restart,   ReStart the datatunnel   |
+====================================================+
EOF
  exit 1
fi

if [ "$1" = "start" ] ; then
  check_process_exists
  if [ ! -d "$DATATUNNEL_HOME"/log ]; then
    mkdir $DATATUNNEL_HOME/log
  fi
  while true;
  do
    $DATATUNNEL_HOME/bin/datatunnel-monitor.sh $RUNJAVA -classpath $CLASSPATH $JAVA_OPTS com.ganqiang.datatunnel.DataTunnel
    code=$?
    #echo "DataTunnel is terminated and exit code is " $code
    if [ $code == 0 ]; then
      exit $code
    fi
    echo "DataTunnel is going to be restarted 5 seconds"
    sleep 5;
  done &
  echo $! > $DATATUNNEL_MONITOR_PID
  echo "Start the datatunnel success."
elif [ "$1" = "restart" ] ; then
  if [ -f "$DATATUNNEL_PID" ]; then
    kill -9 `cat $DATATUNNEL_MONITOR_PID` > /dev/null 2>&1 | xargs rm -rf $DATATUNNEL_MONITOR_PID
    kill -9 `cat $DATATUNNEL_PID` > /dev/null 2>&1 | xargs rm -rf $DATATUNNEL_PID
    echo "Stop success."
  else
    ps -ef | grep $DATATUNNEL_PRGNAME | awk '{print $2}' | xargs kill -9 > /dev/null 2>&1 &
    #echo "Stop failed: $DATATUNNEL_PID not exist"
  fi
  check_process_exists
  if [ ! -d "$DATATUNNEL_HOME"/log ]; then
    mkdir $DATATUNNEL_HOME/log
  fi
  while true;
  do
    $DATATUNNEL_HOME/bin/swift-monitor.sh $RUNJAVA -classpath $CLASSPATH $JAVA_OPTS com.ganqiang.datatunnel.DataTunnel
    code=$?
    #echo "DataTunnel is terminated and exit code is " $code
    if [ $code == 0 ]; then
      exit $code
    fi
    echo "DataTunnel is going to be restarted 5 seconds"
    sleep 5;
  done &
  echo $! > $DATATUNNEL_MONITOR_PID
  echo "ReStart the datatunnel success."
elif [ "$1" = "stop" ] ; then
  if [ -f "$DATATUNNEL_PID" ]; then
    kill -9 `cat $DATATUNNEL_MONITOR_PID` > /dev/null 2>&1 | xargs rm -rf $DATATUNNEL_MONITOR_PID
    kill -9 `cat $DATATUNNEL_PID` > /dev/null 2>&1 | xargs rm -rf $DATATUNNEL_PID
    echo "Stop success."
  else
    ps -ef | grep $DATATUNNEL_PRGNAME | awk '{print $2}' | xargs kill -9 > /dev/null 2>&1 &
    #echo "Stop failed: $DATATUNNEL_PID not exist"
  fi
fi

